#ifndef __CORDIC_H_
#define __CORDIC_H_

//Cordic in 32 bit signed fixed point math
//Function is valid for arguments in range -pi/2 -- pi/2
//for values pi/2--pi: value = half_pi-(theta-half_pi) and similarly for values -pi---pi/2
//
// 1.0 = 1073741824
// 1/k = 0.6072529350088812561694
// pi = 3.1415926535897932384626

//Constants
#ifdef CORDIC_30BITS
	#define cordic_1K 0x26DD3B6A
	#define half_pi 0x6487ED51
	#define MUL 1073741824.000000
	#define CORDIC_NTAB 32
#else
	#define cordic_1K 0x0000026E
	#define CORDIC_ONE 0x00000400 //decimal is: 1024
	#define CORDIC_NTAB 11
    #define CORDIC_FRAC_PART 10
	#define CORDIC_PI 0x00000C91  //decimal is:
	#define CORDIC_HALF_PI 0x00000648
	#define CORDIC_NINTH_PI 0x00000165
	#define CORDIC_255 0x3FC00
	#define CORDIC_SQRT2_255 0x5A280
#endif

void cordic(int theta, int *s, int *c, int n);
void atan_cordic(signed int y_in, signed int x_in, signed int *norm, signed int *angle, signed int n);

//generated by a matlab script
static const signed int cordic_ctab [] = {0x00000324, 0x000001DB, 0x000000FB,
		0x0000007F, 0x00000040, 0x00000020, 0x00000010, 0x00000008, 0x00000004,
		0x00000002, 0x00000001};

//generated by a matlab script
static const signed int binsAngle[9]={0x00000000, 0x00000165, 0x000002CB,
									  0x00000430, 0x00000596, 0x000006FB,
									  0x00000861, 0x000009C6, 0x00000B2C};

#endif
