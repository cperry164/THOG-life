### TIE Report File

# These are the instructions in each slot
slot <Inst> instructions: nop=NOP
    RUR.reg_A WUR.reg_A tie_add 


### Register File port information
# These are the read and write ports for each regfile. 
regfile AR:
    
        port rd0: width( 32) stage( 1) operands( {ars,0} {opnd_tie_add_in4,0}) 
        port rd1: width( 32) stage( 1 2 3) operands( {art,0} {opnd_tie_add_in3,0}) 
        port rd2: width( 32) stage( 1) operands( {opnd_tie_add_in2,0}) 
        port rd3: width( 32) stage( 1) operands( {opnd_tie_add_in1,0}) 
        port wr0: width( 32) stage( 1 2) operands( {ar0,0} {ar12,0} {ar4,0} {ar8,0} {arr,0} {ars,0} {ars_entry,0} {art,0}) 
regfile BR:
    
        port rd0: width( 1 4 8 16) stage( 1) operands( {brall,0} {bs4,0} {bs8,0} {bt,0}) 
        port rd1: width( 1) stage( 1) operands( {bs,0}) 
        port wr0: width( 1 16) stage( 1) operands( {br,0} {brall,0} {bt,0}) 


### Register file port and state information by stage
# These are the read and write ports for each regfile and states.
regfile AR:
    Port rd0 Operand ars Slot 0 Stage 1: CALLX12 CALLX8 CALLX4 ENTRY MOVSP RETW RETW.N L32E S32E ADD.N ADDI.N BEQZ.N BNEZ.N L32I.N MOV.N RET.N S32I.N ADDI ADDMI ADD SUB ADDX2 ADDX4 ADDX8 SUBX2 SUBX4 SUBX8 AND OR XOR BEQI BNEI BGEI BLTI BBCI BBSI BGEUI BLTUI BEQ BNE BGE BLT BGEU BLTU BANY BNONE BALL BNALL BBC BBS BEQZ BNEZ BGEZ BLTZ CALLX0 JX L16UI L16SI L32I L8UI LOOP LOOPNEZ LOOPGTZ MOVEQZ MOVNEZ MOVLTZ MOVGEZ RET S16I S32I S32NB S8I SSR SSL SSA8L SSA8B SLL SRC SLLI MUL16U MUL16S MULL LDDR32.P SDDR32.P MOVF MOVT IPF IHI III LICT LICW SICT SICW DHWB DHWBI DIWBUI.P DIWB DIWBI DHI DII DPFR DPFW DPFRO DPFWO SDCT LDCT IDTLB PDTLB RDTLB0 RDTLB1 WDTLB IITLB PITLB RITLB0 RITLB1 WITLB CLAMPS MIN MAX MINU MAXU NSA NSAU SEXT L32AI S32RI S32C1I QUOU QUOS REMU REMS RER WER
    Port rd0 Operand opnd_tie_add_in4 Slot 0 Stage 1: tie_add
    Port rd1 Operand art Slot 0 Stage 1: WSR.WINDOWBASE XSR.WINDOWBASE WSR.WINDOWSTART XSR.WINDOWSTART ADD.N ADD SUB ADDX2 ADDX4 ADDX8 SUBX2 SUBX4 SUBX8 AND OR XOR BEQ BNE BGE BLT BGEU BLTU BANY BNONE BALL BNALL BBC BBS EXTUI MOVEQZ MOVNEZ MOVLTZ MOVGEZ NEG ABS SRC SRL SRA SRAI SRLI WSR.LEND XSR.LEND WSR.LBEG XSR.LBEG WSR.SAR XSR.SAR WSR.MEMCTL XSR.MEMCTL WSR.LITBASE XSR.LITBASE WSR.PS XSR.PS MUL16U MUL16S MULL WSR.BR XSR.BR MIN MAX MINU MAXU QUOU QUOS REMU REMS WER WUR.reg_A
    Port rd1 Operand art Slot 0 Stage 2: S32E S32I.N S16I S32I S32NB S8I WSR.CONFIGID0 WSR.INTENABLE XSR.INTENABLE WSR.ICOUNTLEVEL XSR.ICOUNTLEVEL SICT SICW SDCT S32RI S32C1I
    Port rd1 Operand art Slot 0 Stage 3: WSR.LCOUNT XSR.LCOUNT WSR.EPC1 XSR.EPC1 WSR.EXCSAVE1 XSR.EXCSAVE1 WSR.EPC2 XSR.EPC2 WSR.EXCSAVE2 XSR.EXCSAVE2 WSR.EPC3 XSR.EPC3 WSR.EXCSAVE3 XSR.EXCSAVE3 WSR.EPS2 XSR.EPS2 WSR.EPS3 XSR.EPS3 WSR.EXCVADDR XSR.EXCVADDR WSR.DEPC XSR.DEPC WSR.EXCCAUSE XSR.EXCCAUSE WSR.VECBASE XSR.VECBASE WSR.INTSET WSR.INTCLEAR WSR.DBREAKA0 XSR.DBREAKA0 WSR.DBREAKC0 XSR.DBREAKC0 WSR.IBREAKA0 XSR.IBREAKA0 WSR.IBREAKENABLE XSR.IBREAKENABLE WSR.DEBUGCAUSE XSR.DEBUGCAUSE WSR.ICOUNT XSR.ICOUNT WSR.DDR XSR.DDR WSR.CCOUNT XSR.CCOUNT WSR.CCOMPARE0 XSR.CCOMPARE0 WSR.CCOMPARE1 XSR.CCOMPARE1 WDTLB WITLB WSR.CPENABLE XSR.CPENABLE WSR.SCOMPARE1 XSR.SCOMPARE1 WSR.ATOMCTL XSR.ATOMCTL
    Port rd1 Operand opnd_tie_add_in3 Slot 0 Stage 1: tie_add
    Port rd2 Operand opnd_tie_add_in2 Slot 0 Stage 1: tie_add
    Port rd3 Operand opnd_tie_add_in1 Slot 0 Stage 1: tie_add
    Port wr0 Operand ar0 Slot 0 Stage 1: CALL0 CALLX0
    Port wr0 Operand ar12 Slot 0 Stage 1: CALL12 CALLX12
    Port wr0 Operand ar4 Slot 0 Stage 1: CALL4 CALLX4
    Port wr0 Operand ar8 Slot 0 Stage 1: CALL8 CALLX8
    Port wr0 Operand arr Slot 0 Stage 1: ADD.N ADDI.N ADD SUB ADDX2 ADDX4 ADDX8 SUBX2 SUBX4 SUBX8 AND OR XOR EXTUI MOVEQZ MOVNEZ MOVLTZ MOVGEZ NEG ABS SLL SRC SRL SRA SLLI SRAI SRLI MOVF MOVT CLAMPS MIN MAX MINU MAXU SEXT QUOU QUOS REMU REMS RUR.reg_A
    Port wr0 Operand arr Slot 0 Stage 2: MUL16U MUL16S MULL
    Port wr0 Operand ars Slot 0 Stage 1: MOVI.N LDDR32.P SDDR32.P DIWBUI.P
    Port wr0 Operand ars_entry Slot 0 Stage 1: ENTRY
    Port wr0 Operand art Slot 0 Stage 1: MOVSP RSR.WINDOWBASE XSR.WINDOWBASE RSR.WINDOWSTART XSR.WINDOWSTART MOV.N ADDI ADDMI MOVI RSIL RSR.LEND XSR.LEND RSR.LBEG XSR.LBEG RSR.SAR XSR.SAR RSR.MEMCTL XSR.MEMCTL RSR.LITBASE XSR.LITBASE RSR.BR XSR.BR NSA NSAU RER
    Port wr0 Operand art Slot 0 Stage 2: L32E L32I.N L16UI L16SI L32I L32R L8UI RSR.LCOUNT XSR.LCOUNT RSR.CONFIGID0 RSR.CONFIGID1 RSR.PS XSR.PS RSR.EPC1 XSR.EPC1 RSR.EXCSAVE1 XSR.EXCSAVE1 RSR.EPC2 XSR.EPC2 RSR.EXCSAVE2 XSR.EXCSAVE2 RSR.EPC3 XSR.EPC3 RSR.EXCSAVE3 XSR.EXCSAVE3 RSR.EPS2 XSR.EPS2 RSR.EPS3 XSR.EPS3 RSR.EXCVADDR XSR.EXCVADDR RSR.DEPC XSR.DEPC RSR.EXCCAUSE XSR.EXCCAUSE RSR.PRID RSR.VECBASE XSR.VECBASE RSR.INTERRUPT RSR.INTENABLE XSR.INTENABLE RSR.DBREAKA0 XSR.DBREAKA0 RSR.DBREAKC0 XSR.DBREAKC0 RSR.IBREAKA0 XSR.IBREAKA0 RSR.IBREAKENABLE XSR.IBREAKENABLE RSR.DEBUGCAUSE XSR.DEBUGCAUSE RSR.ICOUNT XSR.ICOUNT RSR.ICOUNTLEVEL XSR.ICOUNTLEVEL RSR.DDR XSR.DDR RSR.CCOUNT XSR.CCOUNT RSR.CCOMPARE0 XSR.CCOMPARE0 RSR.CCOMPARE1 XSR.CCOMPARE1 LICT LICW LDCT PDTLB RDTLB0 RDTLB1 PITLB RITLB0 RITLB1 RSR.CPENABLE XSR.CPENABLE L32AI S32C1I RSR.SCOMPARE1 XSR.SCOMPARE1 RSR.ATOMCTL XSR.ATOMCTL
regfile BR:
    Port rd0 Operand brall Slot 0 Stage 1: RSR.BR XSR.BR
    Port rd0 Operand bs4 Slot 0 Stage 1: ANY4 ALL4
    Port rd0 Operand bs8 Slot 0 Stage 1: ANY8 ALL8
    Port rd0 Operand bt Slot 0 Stage 1: ANDB ANDBC ORB ORBC XORB MOVF MOVT
    Port rd1 Operand bs Slot 0 Stage 1: ANDB ANDBC ORB ORBC XORB BF BT
    Port wr0 Operand br Slot 0 Stage 1: ANDB ANDBC ORB ORBC XORB
    Port wr0 Operand brall Slot 0 Stage 1: WSR.BR XSR.BR
    Port wr0 Operand bt Slot 0 Stage 1: ANY4 ALL4 ANY8 ALL8
states:
    State XTSYNC (use) Slot 0 Stage 1: RSYNC
    State XTSYNC (use) Slot 0 Stage 2: ESYNC
    State XTSYNC (use) Slot 0 Stage 3: DSYNC
    State XTSYNC (def) Slot 0 Stage 3: WSR.LCOUNT
    State XTSYNC (def) Slot 0 Stage 5: IDTLB
    State VECBASE (use) Slot 0 Stage 2: RSR.VECBASE
    State VECBASE (def) Slot 0 Stage 3: WSR.VECBASE
    State EPC1 (use) Slot 0 Stage 1: RFE
    State EPC1 (use) Slot 0 Stage 2: RSR.EPC1
    State EPC1 (def) Slot 0 Stage 3: WSR.EPC1
    State EPC2 (use) Slot 0 Stage 2: RSR.EPC2
    State EPC2 (use) Slot 0 Stage 1: RFI
    State EPC2 (def) Slot 0 Stage 3: WSR.EPC2
    State EPC3 (use) Slot 0 Stage 2: RSR.EPC3
    State EPC3 (use) Slot 0 Stage 1: RFI
    State EPC3 (def) Slot 0 Stage 3: WSR.EPC3
    State EXCSAVE1 (use) Slot 0 Stage 2: RSR.EXCSAVE1
    State EXCSAVE1 (def) Slot 0 Stage 3: WSR.EXCSAVE1
    State EXCSAVE2 (use) Slot 0 Stage 2: RSR.EXCSAVE2
    State EXCSAVE2 (def) Slot 0 Stage 3: WSR.EXCSAVE2
    State EXCSAVE3 (use) Slot 0 Stage 2: RSR.EXCSAVE3
    State EXCSAVE3 (def) Slot 0 Stage 3: WSR.EXCSAVE3
    State EPS2 (use) Slot 0 Stage 2: RSR.EPS2
    State EPS2 (use) Slot 0 Stage 1: RFI
    State EPS2 (def) Slot 0 Stage 3: WSR.EPS2
    State EPS3 (use) Slot 0 Stage 2: RSR.EPS3
    State EPS3 (use) Slot 0 Stage 1: RFI
    State EPS3 (def) Slot 0 Stage 3: WSR.EPS3
    State EXCCAUSE (use) Slot 0 Stage 2: RSR.EXCCAUSE
    State EXCCAUSE (def) Slot 0 Stage 3: WSR.EXCCAUSE
    State PSINTLEVEL (use) Slot 0 Stage 2: RSR.PS
    State PSINTLEVEL (use) Slot 0 Stage 1: RSIL
    State PSINTLEVEL (def) Slot 0 Stage 2: RSIL
    State PSUM (use) Slot 0 Stage 1: RSIL
    State PSUM (use) Slot 0 Stage 2: RSR.PS
    State PSUM (def) Slot 0 Stage 2: RFI
    State PSUM (def) Slot 0 Stage 3: WSR.PS
    State PSWOE (use) Slot 0 Stage 1: ENTRY
    State PSWOE (use) Slot 0 Stage 0: ENTRY
    State PSWOE (use) Slot 0 Stage 2: RSR.PS
    State PSWOE (def) Slot 0 Stage 1: RFI
    State PSWOE (def) Slot 0 Stage 3: WSR.PS
    State PSEXCM (use) Slot 0 Stage 1: ENTRY
    State PSEXCM (use) Slot 0 Stage 0: ENTRY
    State PSEXCM (use) Slot 0 Stage 2: RSR.PS
    State PSEXCM (def) Slot 0 Stage 1: RFE
    State DEPC (use) Slot 0 Stage 1: RFDE
    State DEPC (use) Slot 0 Stage 2: RSR.DEPC
    State DEPC (def) Slot 0 Stage 3: WSR.DEPC
    State EXCVADDR (use) Slot 0 Stage 2: RSR.EXCVADDR
    State EXCVADDR (def) Slot 0 Stage 3: WSR.EXCVADDR
    State WindowBase (use) Slot 0 Stage 0: ENTRY
    State WindowBase (use) Slot 0 Stage 1: MOVSP
    State WindowBase (def) Slot 0 Stage 0: ENTRY
    State WindowBase (def) Slot 0 Stage 1: RETW
    State WindowStart (use) Slot 0 Stage 0: ENTRY
    State WindowStart (use) Slot 0 Stage 1: MOVSP
    State WindowStart (def) Slot 0 Stage 0: ENTRY
    State WindowStart (def) Slot 0 Stage 1: RETW
    State PSCALLINC (use) Slot 0 Stage 1: RSIL
    State PSCALLINC (use) Slot 0 Stage 0: ENTRY
    State PSCALLINC (use) Slot 0 Stage 2: RSR.PS
    State PSCALLINC (def) Slot 0 Stage 1: CALL12
    State PSOWB (use) Slot 0 Stage 1: RFWO
    State PSOWB (use) Slot 0 Stage 2: RSR.PS
    State PSOWB (def) Slot 0 Stage 2: RFI
    State PSOWB (def) Slot 0 Stage 3: WSR.PS
    State LBEG (use) Slot 0 Stage 1: RSR.LBEG
    State LBEG (def) Slot 0 Stage 1: LOOP
    State LEND (use) Slot 0 Stage 1: RSR.LEND
    State LEND (def) Slot 0 Stage 1: LOOP
    State SAR (use) Slot 0 Stage 1: SLL
    State SAR (def) Slot 0 Stage 1: SSR
    State InOCDMode (use) Slot 0 Stage 1: LDDR32.P
    State InOCDMode (def) Slot 0 Stage 3: RFI
    State InOCDMode (def) Slot 0 Stage 1: RFDD
    State INTENABLE (use) Slot 0 Stage 2: RSR.INTENABLE
    State INTENABLE (def) Slot 0 Stage 2: WSR.INTENABLE
    State DBREAKA0 (use) Slot 0 Stage 2: RSR.DBREAKA0
    State DBREAKA0 (def) Slot 0 Stage 3: WSR.DBREAKA0
    State DBREAKC0 (use) Slot 0 Stage 2: RSR.DBREAKC0
    State DBREAKC0 (def) Slot 0 Stage 3: WSR.DBREAKC0
    State IBREAKA0 (use) Slot 0 Stage 2: RSR.IBREAKA0
    State IBREAKA0 (def) Slot 0 Stage 3: WSR.IBREAKA0
    State IBREAKENABLE (use) Slot 0 Stage 2: RSR.IBREAKENABLE
    State IBREAKENABLE (def) Slot 0 Stage 3: WSR.IBREAKENABLE
    State ICOUNTLEVEL (use) Slot 0 Stage 2: RSR.ICOUNTLEVEL
    State ICOUNTLEVEL (def) Slot 0 Stage 2: WSR.ICOUNTLEVEL
    State DEBUGCAUSE (use) Slot 0 Stage 2: RSR.DEBUGCAUSE
    State DEBUGCAUSE (def) Slot 0 Stage 3: WSR.DEBUGCAUSE
    State DBNUM (use) Slot 0 Stage 2: RSR.DEBUGCAUSE
    State DBNUM (def) Slot 0 Stage 3: WSR.DEBUGCAUSE
    State CCOMPARE0 (use) Slot 0 Stage 2: RSR.CCOMPARE0
    State CCOMPARE0 (def) Slot 0 Stage 3: WSR.CCOMPARE0
    State CCOMPARE1 (use) Slot 0 Stage 2: RSR.CCOMPARE1
    State CCOMPARE1 (def) Slot 0 Stage 3: WSR.CCOMPARE1
    State CPENABLE (use) Slot 0 Stage 2: RSR.CPENABLE
    State CPENABLE (def) Slot 0 Stage 3: WSR.CPENABLE
    State SCOMPARE1 (use) Slot 0 Stage 3: S32C1I
    State SCOMPARE1 (use) Slot 0 Stage 2: RSR.SCOMPARE1
    State SCOMPARE1 (def) Slot 0 Stage 3: WSR.SCOMPARE1
    State ATOMCTL (use) Slot 0 Stage 2: RSR.ATOMCTL
    State ATOMCTL (def) Slot 0 Stage 3: WSR.ATOMCTL
    State reg_A (use) Slot 0 Stage 1: RUR.reg_A
    State reg_A (def) Slot 0 Stage 1: WUR.reg_A


### Register File port instruction information
# These are the read and write ports for each regfile. 
regfile AR:
  regfile AR: port rd0: slot #0 Inst
    ADD<ars> ADDI<ars> ADDMI<ars> ADDX2<ars> ADDX4<ars> ADDX8<ars> AND<ars> 
    BALL<ars> BANY<ars> BBC<ars> BBCI<ars> BBS<ars> BBSI<ars> BEQ<ars> 
    BEQI<ars> BEQZ<ars> BGE<ars> BGEI<ars> BGEU<ars> BGEUI<ars> BGEZ<ars> 
    BLT<ars> BLTI<ars> BLTU<ars> BLTUI<ars> BLTZ<ars> BNALL<ars> BNE<ars> 
    BNEI<ars> BNEZ<ars> BNONE<ars> CALLX0<ars> CALLX12<ars> CALLX4<ars> 
    CALLX8<ars> CLAMPS<ars> DHI<ars> DHWB<ars> DHWBI<ars> DII<ars> 
    DIWB<ars> DIWBI<ars> DIWBUI.P<ars> DPFR<ars> DPFRO<ars> DPFW<ars> 
    DPFWO<ars> ENTRY<ars> IDTLB<ars> IHI<ars> III<ars> IITLB<ars> IPF<ars> 
    JX<ars> L16SI<ars> L16UI<ars> L32AI<ars> L32E<ars> L32I<ars> L8UI<ars> 
    LDCT<ars> LDDR32.P<ars> LICT<ars> LICW<ars> LOOP<ars> LOOPGTZ<ars> 
    LOOPNEZ<ars> MAX<ars> MAXU<ars> MIN<ars> MINU<ars> MOVEQZ<ars> 
    MOVF<ars> MOVGEZ<ars> MOVLTZ<ars> MOVNEZ<ars> MOVSP<ars> MOVT<ars> 
    MUL16S<ars> MUL16U<ars> MULL<ars> NSA<ars> NSAU<ars> OR<ars> PDTLB<ars> 
    PITLB<ars> QUOS<ars> QUOU<ars> RDTLB0<ars> RDTLB1<ars> REMS<ars> 
    REMU<ars> RER<ars> RET<ars> RETW<ars> RITLB0<ars> RITLB1<ars> S16I<ars> 
    S32C1I<ars> S32E<ars> S32I<ars> S32NB<ars> S32RI<ars> S8I<ars> 
    SDCT<ars> SDDR32.P<ars> SEXT<ars> SICT<ars> SICW<ars> SLL<ars> 
    SLLI<ars> SRC<ars> SSA8B<ars> SSA8L<ars> SSL<ars> SSR<ars> SUB<ars> 
    SUBX2<ars> SUBX4<ars> SUBX8<ars> WDTLB<ars> WER<ars> WITLB<ars> 
    XOR<ars> tie_add<opnd_tie_add_in4> 
  regfile AR: port rd0: slot #0 Inst16a
    ADD.N<ars> ADDI.N<ars> L32I.N<ars> S32I.N<ars> 
  regfile AR: port rd0: slot #0 Inst16b
    BEQZ.N<ars> BNEZ.N<ars> MOV.N<ars> RET.N<ars> RETW.N<ars> 
  regfile AR: port rd1: slot #0 Inst
    ABS<art> ADD<art> ADDX2<art> ADDX4<art> ADDX8<art> AND<art> BALL<art> 
    BANY<art> BBC<art> BBS<art> BEQ<art> BGE<art> BGEU<art> BLT<art> 
    BLTU<art> BNALL<art> BNE<art> BNONE<art> EXTUI<art> MAX<art> MAXU<art> 
    MIN<art> MINU<art> MOVEQZ<art> MOVGEZ<art> MOVLTZ<art> MOVNEZ<art> 
    MUL16S<art> MUL16U<art> MULL<art> NEG<art> OR<art> QUOS<art> QUOU<art> 
    REMS<art> REMU<art> S16I<art> S32C1I<art> S32E<art> S32I<art> 
    S32NB<art> S32RI<art> S8I<art> SDCT<art> SICT<art> SICW<art> SRA<art> 
    SRAI<art> SRC<art> SRL<art> SRLI<art> SUB<art> SUBX2<art> SUBX4<art> 
    SUBX8<art> WDTLB<art> WER<art> WITLB<art> WSR.ATOMCTL<art> WSR.BR<art> 
    WSR.CCOMPARE0<art> WSR.CCOMPARE1<art> WSR.CCOUNT<art> 
    WSR.CONFIGID0<art> WSR.CPENABLE<art> WSR.DBREAKA0<art> 
    WSR.DBREAKC0<art> WSR.DDR<art> WSR.DEBUGCAUSE<art> WSR.DEPC<art> 
    WSR.EPC1<art> WSR.EPC2<art> WSR.EPC3<art> WSR.EPS2<art> WSR.EPS3<art> 
    WSR.EXCCAUSE<art> WSR.EXCSAVE1<art> WSR.EXCSAVE2<art> WSR.EXCSAVE3<art> 
    WSR.EXCVADDR<art> WSR.IBREAKA0<art> WSR.IBREAKENABLE<art> 
    WSR.ICOUNT<art> WSR.ICOUNTLEVEL<art> WSR.INTCLEAR<art> 
    WSR.INTENABLE<art> WSR.INTSET<art> WSR.LBEG<art> WSR.LCOUNT<art> 
    WSR.LEND<art> WSR.LITBASE<art> WSR.MEMCTL<art> WSR.PS<art> WSR.SAR<art> 
    WSR.SCOMPARE1<art> WSR.VECBASE<art> WSR.WINDOWBASE<art> 
    WSR.WINDOWSTART<art> WUR.reg_A<art> XOR<art> XSR.ATOMCTL<art> 
    XSR.BR<art> XSR.CCOMPARE0<art> XSR.CCOMPARE1<art> XSR.CCOUNT<art> 
    XSR.CPENABLE<art> XSR.DBREAKA0<art> XSR.DBREAKC0<art> XSR.DDR<art> 
    XSR.DEBUGCAUSE<art> XSR.DEPC<art> XSR.EPC1<art> XSR.EPC2<art> 
    XSR.EPC3<art> XSR.EPS2<art> XSR.EPS3<art> XSR.EXCCAUSE<art> 
    XSR.EXCSAVE1<art> XSR.EXCSAVE2<art> XSR.EXCSAVE3<art> XSR.EXCVADDR<art> 
    XSR.IBREAKA0<art> XSR.IBREAKENABLE<art> XSR.ICOUNT<art> 
    XSR.ICOUNTLEVEL<art> XSR.INTENABLE<art> XSR.LBEG<art> XSR.LCOUNT<art> 
    XSR.LEND<art> XSR.LITBASE<art> XSR.MEMCTL<art> XSR.PS<art> XSR.SAR<art> 
    XSR.SCOMPARE1<art> XSR.VECBASE<art> XSR.WINDOWBASE<art> 
    XSR.WINDOWSTART<art> tie_add<opnd_tie_add_in3> 
  regfile AR: port rd1: slot #0 Inst16a
    ADD.N<art> S32I.N<art> 
  regfile AR: port rd2: slot #0 Inst
    tie_add<opnd_tie_add_in2> 
  regfile AR: port rd3: slot #0 Inst
    tie_add<opnd_tie_add_in1> 
  regfile AR: port wr0: slot #0 Inst
    ABS<arr> ADD<arr> ADDI<art> ADDMI<art> ADDX2<arr> ADDX4<arr> ADDX8<arr> 
    AND<arr> CALL0<ar0> CALL12<ar12> CALL4<ar4> CALL8<ar8> CALLX0<ar0> 
    CALLX12<ar12> CALLX4<ar4> CALLX8<ar8> CLAMPS<arr> DIWBUI.P<ars> 
    ENTRY<ars> ENTRY<ars_entry> EXTUI<arr> L16SI<art> L16UI<art> L32AI<art> 
    L32E<art> L32I<art> L32R<art> L8UI<art> LDCT<art> LDDR32.P<ars> 
    LICT<art> LICW<art> MAX<arr> MAXU<arr> MIN<arr> MINU<arr> MOVEQZ<arr> 
    MOVF<arr> MOVGEZ<arr> MOVI<art> MOVLTZ<arr> MOVNEZ<arr> MOVSP<art> 
    MOVT<arr> MUL16S<arr> MUL16U<arr> MULL<arr> NEG<arr> NSA<art> NSAU<art> 
    OR<arr> PDTLB<art> PITLB<art> QUOS<arr> QUOU<arr> RDTLB0<art> 
    RDTLB1<art> REMS<arr> REMU<arr> RER<art> RITLB0<art> RITLB1<art> 
    RSIL<art> RSR.ATOMCTL<art> RSR.BR<art> RSR.CCOMPARE0<art> 
    RSR.CCOMPARE1<art> RSR.CCOUNT<art> RSR.CONFIGID0<art> 
    RSR.CONFIGID1<art> RSR.CPENABLE<art> RSR.DBREAKA0<art> 
    RSR.DBREAKC0<art> RSR.DDR<art> RSR.DEBUGCAUSE<art> RSR.DEPC<art> 
    RSR.EPC1<art> RSR.EPC2<art> RSR.EPC3<art> RSR.EPS2<art> RSR.EPS3<art> 
    RSR.EXCCAUSE<art> RSR.EXCSAVE1<art> RSR.EXCSAVE2<art> RSR.EXCSAVE3<art> 
    RSR.EXCVADDR<art> RSR.IBREAKA0<art> RSR.IBREAKENABLE<art> 
    RSR.ICOUNT<art> RSR.ICOUNTLEVEL<art> RSR.INTENABLE<art> 
    RSR.INTERRUPT<art> RSR.LBEG<art> RSR.LCOUNT<art> RSR.LEND<art> 
    RSR.LITBASE<art> RSR.MEMCTL<art> RSR.PRID<art> RSR.PS<art> RSR.SAR<art> 
    RSR.SCOMPARE1<art> RSR.VECBASE<art> RSR.WINDOWBASE<art> 
    RSR.WINDOWSTART<art> RUR.reg_A<arr> S32C1I<art> SDDR32.P<ars> SEXT<arr> 
    SLL<arr> SLLI<arr> SRA<arr> SRAI<arr> SRC<arr> SRL<arr> SRLI<arr> 
    SUB<arr> SUBX2<arr> SUBX4<arr> SUBX8<arr> XOR<arr> XSR.ATOMCTL<art> 
    XSR.BR<art> XSR.CCOMPARE0<art> XSR.CCOMPARE1<art> XSR.CCOUNT<art> 
    XSR.CPENABLE<art> XSR.DBREAKA0<art> XSR.DBREAKC0<art> XSR.DDR<art> 
    XSR.DEBUGCAUSE<art> XSR.DEPC<art> XSR.EPC1<art> XSR.EPC2<art> 
    XSR.EPC3<art> XSR.EPS2<art> XSR.EPS3<art> XSR.EXCCAUSE<art> 
    XSR.EXCSAVE1<art> XSR.EXCSAVE2<art> XSR.EXCSAVE3<art> XSR.EXCVADDR<art> 
    XSR.IBREAKA0<art> XSR.IBREAKENABLE<art> XSR.ICOUNT<art> 
    XSR.ICOUNTLEVEL<art> XSR.INTENABLE<art> XSR.LBEG<art> XSR.LCOUNT<art> 
    XSR.LEND<art> XSR.LITBASE<art> XSR.MEMCTL<art> XSR.PS<art> XSR.SAR<art> 
    XSR.SCOMPARE1<art> XSR.VECBASE<art> XSR.WINDOWBASE<art> 
    XSR.WINDOWSTART<art> 
  regfile AR: port wr0: slot #0 Inst16a
    ADD.N<arr> ADDI.N<arr> L32I.N<art> 
  regfile AR: port wr0: slot #0 Inst16b
    MOV.N<art> MOVI.N<ars> 
regfile BR:
  regfile BR: port rd0: slot #0 Inst
    ALL4<bs4> ALL8<bs8> ANDB<bt> ANDBC<bt> ANY4<bs4> ANY8<bs8> MOVF<bt> 
    MOVT<bt> ORB<bt> ORBC<bt> RSR.BR<brall> XORB<bt> XSR.BR<brall> 
  regfile BR: port rd1: slot #0 Inst
    ANDB<bs> ANDBC<bs> BF<bs> BT<bs> ORB<bs> ORBC<bs> XORB<bs> 
  regfile BR: port wr0: slot #0 Inst
    ALL4<bt> ALL8<bt> ANDB<br> ANDBC<br> ANY4<bt> ANY8<bt> ORB<br> ORBC<br> 
    WSR.BR<brall> XORB<br> XSR.BR<brall> 


### Schedule information for states
State: reg_A
  use stages: 1
  def stages: 1


### User register write instruction def stages
Instruction WUR.reg_A defs user_register reg_A in stage 1.


### Report the generated flops in each semantic 
